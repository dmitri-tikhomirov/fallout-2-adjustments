#include "headers/sfall/sfall.h"
#include "headers/sfall/define_lite.h"
#include "headers/sfall/define_extra.h"

#include "headers/fallout-2-adjustments.h"

#define SAVED_ARRAY_NAME "dt-loot-reduction"

variable
  weaponsReductionNumber,
  ammoReductionNumber,
  drugsReductionNumber,
  excludedItems,
  debuggingEnabled;

variable
  weaponsProgress,
  partyMemberList;

procedure onDeathHandler;
procedure gameModeChangeHandler;

procedure getInventoryContents(variable critter);
procedure reduceWeapons(variable critter, variable weapon,
  variable reductionNumber);
procedure reduceNonWeaponItems(variable critter, variable item,
  variable reductionNumber);

procedure start begin
  if game_loaded then begin
    weaponsReductionNumber = get_ini_setting(
      INI_PATH "|lootReduction|weaponsReductionNumber");
    ammoReductionNumber = get_ini_setting(
      INI_PATH "|lootReduction|ammoReductionNumber");
    drugsReductionNumber = get_ini_setting(
      INI_PATH "|lootReduction|drugsReductionNumber");

    if weaponsReductionNumber > 1 orElse ammoReductionNumber > 1 orElse
        drugsReductionNumber > 1 then begin
      excludedItems = string_split(
        get_ini_string(INI_PATH "|lootReduction|excludedItems"), ",");
      debuggingEnabled = get_ini_setting(INI_PATH "|debugging|lootReduction");

      variable index, value;

      // Convert to integers.
      foreach index: value in excludedItems begin
        excludedItems[index] = atoi(value);
      end
      fix_array(excludedItems);

      if weaponsReductionNumber > 1 then begin
        weaponsProgress = load_array(SAVED_ARRAY_NAME);
        if weaponsProgress == 0 then begin
          weaponsProgress = {};
          save_array(SAVED_ARRAY_NAME, weaponsProgress);
        end

        // In case the reduction number was changed in settings.
        foreach index: value in weaponsProgress begin
          if value > weaponsReductionNumber then value = weaponsReductionNumber;

          if debuggingEnabled == 1 then begin
            display_msg(proto_data(index, it_name) + ", progress: " + value);
          end
        end
      end

      partyMemberList = party_member_list(0);
      fix_array(partyMemberList);

      register_hook_proc(HOOK_ONDEATH, onDeathHandler);
      register_hook_proc(HOOK_GAMEMODECHANGE, gameModeChangeHandler);
    end
  end
end

procedure onDeathHandler begin
  variable theDeceased = get_sfall_arg_at(0);

  // Check if the deceased critter was a party member before death.
  if scan_array(partyMemberList, theDeceased) != -1 orElse
      theDeceased == dude_obj then begin
    return;
  end

  variable
    inventoryContents = getInventoryContents(theDeceased),
    item, itemType;

  if debuggingEnabled == 1 then begin
    display_msg("theDeceased: " + obj_name(theDeceased) +
      ", inventoryContents:");
    foreach item: itemType in inventoryContents begin
      display_msg(
        obj_name(item) +
        ", type: " + itemType +
        ", count: " + obj_is_carrying_obj(theDeceased, item)
      );
    end
  end

  foreach item: itemType in inventoryContents begin
    if itemType == item_type_weapon andAlso weaponsReductionNumber > 1 andAlso
        scan_array(excludedItems, obj_pid(item)) == -1 then begin
      call reduceWeapons(theDeceased, item, weaponsReductionNumber);

      continue;
    end

    if itemType == item_type_ammo andAlso ammoReductionNumber > 1 andAlso
        scan_array(excludedItems, obj_pid(item)) == -1 then begin
      call reduceNonWeaponItems(theDeceased, item, ammoReductionNumber);

      continue;
    end

    if itemType == item_type_drug andAlso drugsReductionNumber > 1 andAlso
        scan_array(excludedItems, obj_pid(item)) == -1 then begin
      call reduceNonWeaponItems(theDeceased, item, drugsReductionNumber);

      continue;
    end
  end
end

// Update party member list after exiting dialogue.
procedure gameModeChangeHandler begin
  variable
    previousGameMode = get_sfall_arg_at(1),
    currentGameMode = get_game_mode;

  if previousGameMode bwand DIALOG andAlso
      not(currentGameMode bwand DIALOG) then begin
    partyMemberList = party_member_list(0);
    fix_array(partyMemberList);
  end
end

procedure reduceWeapons(variable critter, variable weapon,
    variable reductionNumber) begin
  variable
    weaponPid = obj_pid(weapon),
    weaponName = obj_name(weapon),
    progress = weaponsProgress[weaponPid];

  // Drop the first weapon of each kind.
  if progress == 0 then progress = reductionNumber;

  progress--;

  variable
    weaponCount = obj_is_carrying_obj(critter, weapon),
    removeCount = weaponCount -
      (weaponCount + progress) / reductionNumber;

  // A variable is needed for this function to work.
  variable didDestroy = destroy_mult_objs(weapon, removeCount);

  if debuggingEnabled == 1 then begin
    display_msg(
      weaponName +
      ", count: " + weaponCount +
      ", progress: " + (progress + 1) +
      ", removeCount: " + removeCount
    );
  end

  progress = (progress + weaponCount) % reductionNumber + 1;

  if debuggingEnabled == 1 then begin
    display_msg("progress: " + progress);
  end

  weaponsProgress[weaponPid] = progress;

  display_msg(weaponName + ", " + progress + "/" + reductionNumber);
end

procedure reduceNonWeaponItems(variable critter, variable item,
    variable reductionNumber) begin
  variable
    itemCount = obj_is_carrying_obj(critter, item),
    removeCount = itemCount - itemCount / reductionNumber;

  // Always leave at least one item (the first item is never destroyed).
  if itemCount % reductionNumber != 0 then removeCount -= 1;

  variable didDestroy = destroy_mult_objs(item, removeCount);

  if debuggingEnabled == 1 then begin
    display_msg(
      obj_name(item) +
      ", itemCount: " + itemCount +
      ", removeCount: " + removeCount
    );
  end
end

procedure getInventoryContents(variable critter) begin
  variable inventoryContents = {}, slotNumber = 0;

  while inven_ptr(critter, slotNumber) do begin
    inventoryContents[inven_ptr(critter, slotNumber)] =
      obj_item_subtype(inven_ptr(critter, slotNumber));
    slotNumber++;
  end

  return inventoryContents;
end
