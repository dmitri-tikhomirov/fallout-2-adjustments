#include "headers/sfall/sfall.h"
#include "headers/sfall/define_lite.h"
#include "headers/sfall/define_extra.h"

#include "headers/fallout-2-adjustments.h"

#define SAVED_ARRAY_NAME "dt-loot-reduction"

variable
  weaponsReductionNumber,
  ammoReductionNumber,
  drugsReductionNumber,
  excludedItems,
  debuggingEnabled;

variable weaponsProgress;

procedure onDeathHandler;

procedure getInventoryContents(variable critter);

procedure start begin
  if game_loaded then begin
    weaponsReductionNumber = get_ini_setting(
      INI_PATH "|lootReduction|weaponsReductionNumber");
    ammoReductionNumber = get_ini_setting(
      INI_PATH "|lootReduction|ammoReductionNumber");
    drugsReductionNumber = get_ini_setting(
      INI_PATH "|lootReduction|drugsReductionNumber");

    if weaponsReductionNumber > 1 orElse ammoReductionNumber > 1 orElse
        drugsReductionNumber > 1 then begin
      excludedItems = string_split(
        get_ini_string(INI_PATH "|lootReduction|excludedItems"), ",");
      debuggingEnabled = get_ini_setting(INI_PATH "|debugging|lootReduction");

      variable index, value;

      // Convert to integers.
      foreach index: value in excludedItems begin
        excludedItems[index] = atoi(value);
      end
      fix_array(excludedItems);

      if weaponsReductionNumber > 1 then begin
        weaponsProgress = load_array(SAVED_ARRAY_NAME);
        if weaponsProgress == 0 then begin
          weaponsProgress = {};
          save_array(SAVED_ARRAY_NAME, weaponsProgress);
        end

        if debuggingEnabled == 1 then begin
          foreach index: value in weaponsProgress begin
            display_msg(proto_data(index, it_name) +
              ", progress: " + value);
          end
        end
      end

      register_hook_proc(HOOK_ONDEATH, onDeathHandler);
    end
  end
end

procedure onDeathHandler begin
  variable theDeceased = get_sfall_arg_at(0);

  if party_member_obj(obj_pid(theDeceased)) orElse
      theDeceased == dude_obj then begin
    return;
  end

  variable
    inventoryContents = getInventoryContents(theDeceased),
    item, itemType;

  if debuggingEnabled == 1 then begin
    display_msg("theDeceased: " + obj_name(theDeceased) +
      ", inventoryContents:");
    foreach item: itemType in inventoryContents begin
      display_msg(
        obj_name(item) +
        ", type: " + itemType +
        ", count: " + obj_is_carrying_obj(theDeceased, item)
      );
    end
  end

  foreach item: itemType in inventoryContents begin
    if itemType == item_type_weapon andAlso weaponsReductionNumber > 1 andAlso
        scan_array(excludedItems, obj_pid(item)) == -1 then begin
      variable
        itemPid = obj_pid(item),
        itemName = obj_name(item),
        progress = weaponsProgress[itemPid];

      // Drop the first weapon of each kind.
      if progress == 0 then progress = weaponsReductionNumber;

      progress--;

      variable
        itemCount = obj_is_carrying_obj(theDeceased, item),
        removeCount = itemCount - (itemCount + progress) / weaponsReductionNumber;

      // A variable is needed for this function to work.
      variable didDestroy = destroy_mult_objs(item, removeCount);

      if debuggingEnabled == 1 then begin
        display_msg(
          itemName +
          ", count: " + itemCount +
          ", progress: " + (progress + 1) +
          ", removeCount: " + removeCount
        );
      end

      progress = (progress + itemCount) % weaponsReductionNumber;

      if debuggingEnabled == 1 then begin
        display_msg("progress: " + (progress + 1));
      end

      weaponsProgress[itemPid] = progress + 1;

      display_msg(itemName + ", " + (progress + 1) + "/" + weaponsReductionNumber);
    end

    if itemType == item_type_ammo andAlso ammoReductionNumber > 1 andAlso
        scan_array(excludedItems, obj_pid(item)) == -1 then begin
      variable stackSize = get_proto_data(obj_pid(item), PROTO_AM_PACK_SIZE);

      display_msg(obj_name(item) + ", stack size: " + stackSize);
    end

    if itemType == item_type_drug andAlso drugsReductionNumber > 1 andAlso
        scan_array(excludedItems, obj_pid(item)) == -1 then begin
    end
  end
end

procedure getInventoryContents(variable critter) begin
  variable inventoryContents = {}, slotNumber = 0;

  while inven_ptr(critter, slotNumber) do begin
    inventoryContents[inven_ptr(critter, slotNumber)] =
      obj_item_subtype(inven_ptr(critter, slotNumber));
    slotNumber++;
  end

  return inventoryContents;
end

// To do:
// 1. itemCount = itemCount / reductionNumber.
// 2. If > 1, we are done. If < 1, make it 1.
// 3. Destroy 1 item with a chance? The chance is:
// itemCount / reductionNumber
// For example, 3 items, 10 reductionNumber. Need 0.3 items on average.
// 3 / 10
procedure reduceItemCountRandomly(
  variable critter,
  variable item,
  variable reductionNumber)
begin
end
