#include "headers/sfall/sfall.h"
#include "headers/sfall/define_lite.h"

#include "headers/fallout-2-adjustments.h"

variable
  armorPenaltyEnabled,
  failSneakChecksInCombat,
  debuggingEnabled;

procedure sneakHandler;
procedure inventoryMoveHandler;
procedure gameModeChangeHandler;

procedure calculateSneakPenalty(variable sneak, variable armor);
procedure getSneakCheckDuration(variable sneak, variable sneakCheckResult);

procedure start begin
  if game_loaded then begin
    armorPenaltyEnabled =
      get_ini_setting(INI_PATH "|sneak|armorPenalty");
    failSneakChecksInCombat =
      get_ini_setting(INI_PATH "|sneak|failSneakChecksInCombat");

    if armorPenaltyEnabled == 1 orElse failSneakChecksInCombat == 1 then begin
      debuggingEnabled = get_ini_setting(
        INI_PATH "|debugging|sneak");
      register_hook_proc(HOOK_SNEAK, sneakHandler);
    end

    if armorPenaltyEnabled == 1 then begin
      register_hook_proc(HOOK_INVENTORYMOVE, inventoryMoveHandler);
      register_hook_proc(HOOK_GAMEMODECHANGE, gameModeChangeHandler);
    end
  end
end

procedure sneakHandler begin
  variable
    sneakCheckResult,
    isSneakRerolled = false;

  // Fail sneak roll in combat.
  if combat_is_initialized andAlso failSneakChecksInCombat == 1 then begin
    set_sfall_return(0);

    if debuggingEnabled == 1 then display_msg("Failed sneak check in combat.");
    sneakCheckResult = 0;
    isSneakRerolled = true;
  end

  if armorPenaltyEnabled == 1 then begin
    variable
      sneak = has_skill(dude_obj, SKILL_SNEAK),
      armor = critter_inven_obj(dude_obj, INVEN_TYPE_WORN),
      sneakPenalty = calculateSneakPenalty(sneak, armor);

    if sneakPenalty > 0 then begin
      // Apply sneak penalty.
      critter_mod_skill(dude_obj, SKILL_SNEAK, -sneakPenalty);
      if debuggingEnabled == 1 then display_msg("Applied sneak penalty.");
      sneak -= sneakPenalty;

      // Reroll sneak.
      if not(isSneakRerolled) then begin
        sneakCheckResult = is_success(roll_vs_skill(dude_obj, SKILL_SNEAK, 0));

        set_sfall_return(sneakCheckResult);

        if debuggingEnabled == 1 then begin
          display_msg("Rerolled sneak, sneakCheckResult: " + sneakCheckResult);
        end
      end

      if debuggingEnabled == 1 then begin
        display_msg(
          "sneakCheckDuration: " + get_sfall_arg_at(1) +
          ", newSneak: " + sneak +
          ", newDuration: " + getSneakCheckDuration(sneak, sneakCheckResult)
        );
      end

      // Update sneak check duration.
      set_sfall_return(getSneakCheckDuration(sneak, sneakCheckResult));

      // Remove sneak penalty.
      critter_mod_skill(dude_obj, SKILL_SNEAK, sneakPenalty);
      if debuggingEnabled == 1 then display_msg("Removed sneak penalty.");
    end
  end
end

// Prevent equipping armor while in sneak mode.
procedure inventoryMoveHandler begin
  variable
    targetSlot = get_sfall_arg_at(0),
    movedItem = get_sfall_arg_at(1);

  if targetSlot == 3 andAlso using_skill(dude_obj, SKILL_SNEAK) andAlso
      obj_item_subtype(movedItem) == item_type_armor then begin
    display_msg("Cannot equip armor while sneaking.");

    set_sfall_return(0);
  end
end

// Inform about the penalty when opening the character screen.
procedure gameModeChangeHandler begin
  variable
    previousGameMode = get_sfall_arg_at(1),
    currentGameMode = get_game_mode;

  if not(previousGameMode bwand CHARSCREEN) andAlso
      currentGameMode bwand CHARSCREEN then begin
    if using_skill(dude_obj, SKILL_SNEAK) then begin
      variable
        sneak = has_skill(dude_obj, SKILL_SNEAK),
        armor = critter_inven_obj(dude_obj, INVEN_TYPE_WORN);

      display_msg("Sneak penalty from armor: " +
        calculateSneakPenalty(sneak, armor) + " point(s).");
    end
  end
end

procedure calculateSneakPenalty(variable sneak, variable armor) begin
  variable
    armorPid = obj_pid(armor),
    armorWeight = proto_data(armorPid, it_weight);

  // All types of power armor have their proto weight divided by 2,
  // because power armor had 2x weight in Fallout 1.
  if armorPid == PID_POWERED_ARMOR orElse
      armorPid == PID_HARDENED_POWER_ARMOR orElse
      armorPid == PID_ADVANCED_POWER_ARMOR orElse
      armorPid == PID_ADVANCED_POWER_ARMOR_MK2 then begin
    armorWeight /= 2;
  end

  variable penalty = floor(0.025 * (armorWeight - 10) * sneak);

  if penalty > 0 then begin
    // Tagged skill can be adjusted by 2 points minimum.
    if is_skill_tagged(SKILL_SNEAK) andAlso penalty % 2 then penalty--;
  end else penalty = 0;

  if debuggingEnabled == 1 then begin
    display_msg("Calculated sneak penalty.");
    display_msg(
      "sneak: " + sneak +
      ", penalty: " + penalty +
      ", armorWeight: " + armorWeight
    );
  end

  return penalty;
end

procedure getSneakCheckDuration(variable sneak, variable sneakCheckResult) begin
  variable
    sneakValues = [81, 101, 136, 171, 201, 251],
    sneakCheckDurations = [40, 30, 20, 15, 12, 10],
    sneakCheckDuration = 60,
    index = 0,
    sneakValuesLength = len_array(sneakValues);

  if sneakCheckResult == 1 then return game_ticks(sneakCheckDuration);

  while sneak >= sneakValues[index] andAlso index < sneakValuesLength do begin
    index++;
  end

  if index != 0 then begin
    sneakCheckDuration = sneakCheckDurations[index - 1];
  end

  return game_ticks(sneakCheckDuration);
end
