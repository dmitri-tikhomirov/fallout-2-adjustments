#include "headers/sfall/sfall.h"

#include "headers/fallout-2-adjustments.h"

variable
  keyMapping,
  disabledKeys,
  openCloseWithSameKey,
  debuggingEnabled;

variable
  isDisabledKeyPressSet,
  isInventoryPressSet,
  isSkilldexPressSet,
  isMappedKeyPressSet;

procedure keyPressHandler;

procedure getKeyCode(variable key);

procedure start begin
  if game_loaded then begin
    if get_ini_setting(INI_PATH "|keyboardControls|customControlsEnabled") == 1
        then begin
      debuggingEnabled = get_ini_setting(
        INI_PATH "|debugging|keyboardControls");
      keyMapping = get_ini_section(INI_PATH, "keyboardControlsMapping");

      variable index, value;

      // Convert key names to codes.
      foreach index: value in keyMapping begin
        index = getKeyCode(index);
        keyMapping[index] = getKeyCode(value);
        if debuggingEnabled == 1 then begin
          display_msg(index + "=" + keyMapping[index]);
        end
      end
      fix_array(keyMapping);

      disabledKeys = string_split(
        get_ini_string(INI_PATH "|keyboardControls|disabledKeys"), ",");

      // Convert key names to codes.
      foreach index: value in disabledKeys begin
        disabledKeys[index] = getKeyCode(value);
        if debuggingEnabled == 1 then begin
          display_msg("disabledKeys[" + index + "]: " + disabledKeys[index]);
        end
      end
      fix_array(disabledKeys);

      openCloseWithSameKey =
        get_ini_setting(INI_PATH "|keyboardControls|openCloseWithSameKey");

      register_hook_proc(HOOK_KEYPRESS, keyPressHandler);
    end
  end
end

procedure keyPressHandler begin
  variable currentGameMode = get_game_mode;

  // Disable custom keys in save game window to write comments there properly.
  // Disable custom keys in the Esc menu, in dialogue.
  // Because you can use the first letters to select certain options there.
  if (currentGameMode bwand SAVEGAME orElse
      currentGameMode bwand ESCMENU orElse
      currentGameMode bwand DIALOG) andAlso
      // In case a key that opens one of the above modes is overridden,
      // allow to override its release.
      not(isMappedKeyPressSet) then begin
    return;
  end

  variable
    pressed = get_sfall_arg_at(0),
    released = not(pressed),
    key = get_sfall_arg_at(1);

  if scan_array(disabledKeys, key) != -1 then begin
    // Do not override release if press was not overridden.
    if released andAlso not(isDisabledKeyPressSet) then return;
    else begin
      if pressed then isDisabledKeyPressSet = true;
      else isDisabledKeyPressSet = false;

      set_sfall_return(KEY_CODE_DISABLED);
      return;
    end
  end

  variable mappedKey = scan_array(keyMapping, key);

  if debuggingEnabled == 1 then begin
    display_msg("pressed: " + pressed);
    display_msg("key: " + key);
    display_msg("mappedKey: " + mappedKey);
    display_msg("Inventory mode: " + (currentGameMode bwand INVENTORY));
    display_msg("INTFACEUSE mode: " + (currentGameMode bwand INTFACEUSE));
    display_msg("INTFACELOOT mode: " + (currentGameMode bwand INTFACELOOT));
    display_msg("Skilldex mode: " + (currentGameMode bwand SKILLDEX));
  end

  if openCloseWithSameKey == 1 then begin
    // Close Inventory window with the same key.
    // Game mode changes before you release the key,
    // but you need to set both press and release events to override correctly.
    if (mappedKey == KEY_CODE_I orElse key == KEY_CODE_I) andAlso
        ((currentGameMode bwand INVENTORY orElse
        currentGameMode bwand INTFACEUSE orElse
        currentGameMode bwand INTFACELOOT) andAlso pressed orElse
        isInventoryPressSet) then begin
      if pressed then isInventoryPressSet = true;
      else isInventoryPressSet = false;

      set_sfall_return(KEY_CODE_ESC);
      return;
    end

    // Close Skilldex window with the same key.
    if (mappedKey == KEY_CODE_S orElse key == KEY_CODE_S) andAlso
        (currentGameMode bwand SKILLDEX andAlso pressed orElse
        isSkilldexPressSet) then begin
      if pressed then isSkilldexPressSet = true;
      else isSkilldexPressSet = false;

      set_sfall_return(KEY_CODE_ESC);
      return;
    end
  end

  if mappedKey != -1 then begin
    if released andAlso not(isMappedKeyPressSet) then return;
    else begin
      if pressed then isMappedKeyPressSet = true;
      else isMappedKeyPressSet = false;

      set_sfall_return(mappedKey);
      return;
    end
  end
end

// DirectX scancodes (DX codes) for input keys.
procedure getKeyCode(variable key) begin
  variable keyCodes = {
    "ESC":          KEY_CODE_ESC,
    "ESCAPE":       KEY_CODE_ESC,
    "1":            2,
    "2":            3,
    "3":            4,
    "4":            5,
    "5":            6,
    "6":            7,
    "7":            8,
    "8":            9,
    "9":            10,
    "0":            11,
    "-":            12,
    "MINUS":        12,
    "HYPHEN":       12,
    "=":            13,
    "+":            13,
    "EQUALS":       13,
    "BACKSPACE":    14,
    "TAB":          15,
    "Q":            16,
    "W":            17,
    "E":            18,
    "R":            19,
    "T":            20,
    "Y":            21,
    "U":            22,
    "I":            KEY_CODE_I,
    "O":            24,
    "P":            25,
    "[":            26,
    "{":            26,
    "BRACKET":      26,
    "LEFTBRACKET":  26,
    "LBRACKET":     26,
    "]":            27,
    "}":            27,
    "RIGHTBRACKET": 27,
    "RBRACKET":     27,
    "ENTER":        28,
    "RETURN":       28,
    "CTRL":         29,
    "LEFTCTRL":     29,
    "LCTRL":        29,
    "CONTROL":      29,
    "LEFTCONTROL":  29,
    "LCONTROL":     29,
    "A":            30,
    "S":            KEY_CODE_S,
    "D":            32,
    "F":            33,
    "G":            34,
    "H":            35,
    "J":            36,
    "K":            37,
    "L":            38,
    ";":            39,
    "SEMICOLON":    39,
    "'":            40,
    "APOSTROPHE":   40,
    "`":            KEY_CODE_TILDE,
    "~":            KEY_CODE_TILDE,
    "BACKTICK":     KEY_CODE_TILDE,
    "TILDE":        KEY_CODE_TILDE,
    "SHIFT":        42,
    "LEFTSHIFT":    42,
    "LSHIFT":       42,
    "\\":           43,
    "|":            43,
    "BACKSLASH":    43,
    "Z":            44,
    "X":            45,
    "C":            46,
    "V":            47,
    "B":            48,
    "N":            49,
    "M":            50,
    ",":            51,
    "<":            51,
    "COMMA":        51,
    ".":            52,
    ">":            52,
    "PERIOD":       52,
    "/":            53,
    "?":            53,
    "SLASH":        53,
    "FORWARDSLASH": 53,
    "RIGHTSHIFT":   54,
    "RSHIFT":       54,
    "*":            55,
    "NUMPAD*":      55,
    "NUM*":         55,
    "ALT":          56,
    "LEFTALT":      56,
    "LALT":         56,
    "SPACE":        57,
    "SPACEBAR":     57,
    "CAPSLOCK":     58,
    "CAPS":         58,
    "CAPITAL":      58,
    "F1":           59,
    "F2":           60,
    "F3":           61,
    "F4":           62,
    "F5":           63,
    "F6":           64,
    "F7":           65,
    "F8":           66,
    "F9":           67,
    "F10":          68,
    "NUMLOCK":      69,
    "NUM":          69,
    "SCROLLOCK":    70,
    "SCROLL":       70,
    "NUMPAD7":      71,
    "NUM7":         71,
    "NUMPAD8":      72,
    "NUM8":         72,
    "NUMPAD9":      73,
    "NUM9":         73,
    "NUMPAD-":      74,
    "NUM-":         74,
    "NUMPAD4":      75,
    "NUM4":         75,
    "NUMPAD5":      76,
    "NUM5":         76,
    "NUMPAD6":      77,
    "NUM6":         77,
    "NUMPAD+":      78,
    "NUM+":         78,
    "NUMPAD1":      79,
    "NUM1":         79,
    "NUMPAD2":      80,
    "NUM2":         80,
    "NUMPAD3":      81,
    "NUM3":         81,
    "NUMPAD0":      82,
    "NUM0":         82,
    "NUMPAD.":      83,
    "NUM.":         83,
    "NUMPAD,":      83,
    "NUM,":         83,
    "DECIMAL":      83,
    "F11":          87,
    "F12":          88,
    "NUMPADENTER":  156,
    "NUMENTER":     156,
    "RIGHTCTRL": 	  157,
    "RCTRL": 	      157,
    "RIGHTCONTROL": 157,
    "RCONTROL": 	  157,
    "NUMPAD/":     	181,
    "NUM/":        	181,
    "RIGHTALT": 	  184,
    "RALT": 	      184,
    "HOME":         199,
    "UP":           200,
    "UPARROW":      200,
    "PAGEUP":       201,
    "PGUP":         201,
    "LEFT":         203,
    "LEFTARROW":    203,
    "RIGHT":        205,
    "RIGHTARROW":   205,
    "END":          207,
    "DOWN":         208,
    "DOWNARROW":    208,
    "PAGEDOWN":     209,
    "PGDN":         209,
    "INSERT":       210,
    "INS":          210,
    "DELETE":       211,
    "DEL":          211,

    // A code to disable keys.
    "DISABLED":     KEY_CODE_DISABLED
  };

  key = string_toupper(key);

  return keyCodes[key];
end
