#include "headers/sfall/sfall.h"
#include "headers/sfall/define_lite.h"

#include "headers/fallout-2-adjustments.h"

variable
  armorPenaltyEnabled,
  failSneakChecksInCombat,
  debuggingEnabled;

variable
  sneakPenalty,
  equippedArmor,
  modifiedSneak,
  isPenaltyApplied;

procedure sneakHandler;
procedure gameModeChangeHandler;
procedure inventoryMoveHandler;

procedure applySneakPenalty;
procedure calculateSneakPenalty;
procedure restoreSneakPenalty;
procedure removeSneakPenalty;
procedure getSneakCheckDuration(variable sneak);

procedure start begin
  if game_loaded then begin
    armorPenaltyEnabled =
      get_ini_setting(INI_PATH "|sneak|armorPenalty");
    failSneakChecksInCombat =
      get_ini_setting(INI_PATH "|sneak|failSneakChecksInCombat");

    if armorPenaltyEnabled == 1 orElse failSneakChecksInCombat == 1 then begin
      debuggingEnabled = get_ini_setting(
        INI_PATH "|debugging|sneak");
      register_hook_proc(HOOK_SNEAK, sneakHandler);
    end

    if armorPenaltyEnabled == 1 then begin
      isPenaltyApplied = false;

      register_hook_proc(HOOK_GAMEMODECHANGE, gameModeChangeHandler);
      register_hook_proc(HOOK_INVENTORYMOVE, inventoryMoveHandler);
    end
  end
end

procedure sneakHandler begin
  variable isSneakRerolled = false;

  if combat_is_initialized andAlso failSneakChecksInCombat == 1 then begin
    set_sfall_return(0);

    if debuggingEnabled == 1 then display_msg("Failed sneak check in combat.");
    isSneakRerolled = true;
  end

  if armorPenaltyEnabled == 1 andAlso applySneakPenalty then begin
    if not(isSneakRerolled) then begin
      set_sfall_return(is_success(roll_vs_skill(dude_obj, SKILL_SNEAK, 0)));

      if debuggingEnabled == 1 then display_msg("Rerolled sneak.");
    end

    if debuggingEnabled == 1 then begin
      variable sneakCheckDuration = get_sfall_arg_at(1);
      display_msg(
        "sneakCheckDuration: " + sneakCheckDuration +
        ", newDuration: " + getSneakCheckDuration(modifiedSneak)
      );
    end

    set_sfall_return(getSneakCheckDuration(modifiedSneak));
  end
end

procedure gameModeChangeHandler begin
  variable
    previousGameMode = get_sfall_arg_at(1),
    currentGameMode = get_game_mode;

  // Opening the character screen.
  if not(previousGameMode bwand CHARSCREEN) andAlso
      currentGameMode bwand CHARSCREEN then begin
    // Remove the penalty to prevent abusing armor debuff.
    if isPenaltyApplied then call removeSneakPenalty;

    // If in sneak mode, recalculate the penalty and inform the player.
    if using_skill(dude_obj, SKILL_SNEAK) andAlso
        debuggingEnabled != 1 then begin
      display_msg("Sneak penalty from armor: " + calculateSneakPenalty +
        " point(s).");
    end

    return;
  end

  // Do not save the penalty when saving the game.
  if not(previousGameMode bwand SAVEGAME) andAlso
      currentGameMode bwand SAVEGAME then begin
    if isPenaltyApplied then call removeSneakPenalty;

    return;
  end
end

// Prevent equipping armor while in sneak mode.
procedure inventoryMoveHandler begin
  variable
    targetSlot = get_sfall_arg_at(0),
    movedItem = get_sfall_arg_at(1);

  if targetSlot == 3 andAlso using_skill(dude_obj, SKILL_SNEAK) andAlso
      obj_item_subtype(movedItem) == item_type_armor then begin
    display_msg("Cannot equip armor while sneaking.");

    set_sfall_return(0);
  end
end

procedure applySneakPenalty begin
  if not(isPenaltyApplied) then call restoreSneakPenalty;

  variable
    armor = critter_inven_obj(dude_obj, INVEN_TYPE_WORN),
    sneak = has_skill(dude_obj, SKILL_SNEAK);

  // Recalculate sneak penalty only if sneak points or armor have changed.
  if sneak != modifiedSneak orElse armor != equippedArmor then begin
    call removeSneakPenalty;
    modifiedSneak = sneak + sneakPenalty;

    sneakPenalty = calculateSneakPenalty;
    critter_mod_skill(dude_obj, SKILL_SNEAK, -sneakPenalty);

    modifiedSneak -= sneakPenalty;
    equippedArmor = armor;
    isPenaltyApplied = true;
    if debuggingEnabled == 1 then display_msg("Applied sneak penalty.");

    return true; // Did recalculate.
  end else begin
    if debuggingEnabled == 1 then begin
      display_msg("Sneak penalty is already applied.");
    end

    return false; // Didn't need to recalculate.
  end
end

procedure calculateSneakPenalty begin
  variable
    armor = critter_inven_obj(dude_obj, INVEN_TYPE_WORN),
    armorWeight = proto_data(obj_pid(armor), it_weight),
    sneak = has_skill(dude_obj, SKILL_SNEAK),
    calculatedSneakPenalty = floor(0.025 * (armorWeight - 10) * sneak);

  if calculatedSneakPenalty > 0 then begin
    // Tagged skill can be adjusted by 2 points minimum.
    if is_skill_tagged(SKILL_SNEAK) andAlso
        calculatedSneakPenalty % 2 then begin
      calculatedSneakPenalty--;
    end
  end else calculatedSneakPenalty = 0;

  if debuggingEnabled == 1 then begin
    display_msg("Calculated sneak penalty.");
    display_msg(
      "sneak: " + sneak +
      ", penalty: " + calculatedSneakPenalty +
      ", armor weight: " + armorWeight
    );
  end

  return calculatedSneakPenalty;
end

procedure restoreSneakPenalty begin
  critter_mod_skill(dude_obj, SKILL_SNEAK, -sneakPenalty);
  isPenaltyApplied = true;
  if debuggingEnabled == 1 then display_msg("Restored sneak penalty.");
end

procedure removeSneakPenalty begin
  critter_mod_skill(dude_obj, SKILL_SNEAK, sneakPenalty);
  isPenaltyApplied = false;
  if debuggingEnabled == 1 then display_msg("Removed sneak penalty.");
end

procedure getSneakCheckDuration(variable sneak) begin
  variable
    sneakValues = [81, 101, 136, 171, 201, 250],
    sneakCheckDurations = [40, 30, 20, 15, 12, 10],
    sneakCheckDuration = 60,
    index = 0,
    sneakValuesLength = len_array(sneakValues);

  while sneak >= sneakValues[index] andAlso index < sneakValuesLength do begin
    index++;
  end

  if index != 0 then begin
    sneakCheckDuration = sneakCheckDurations[index - 1];
  end

  return game_ticks(sneakCheckDuration);
end
