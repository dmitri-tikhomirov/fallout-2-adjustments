#include "headers/sfall/sfall.h"
#include "headers/sfall/define_lite.h"

#include "headers/fallout-2-adjustments.h"

variable
  armorRestrictions,
  weaponRestrictions,
  debuggingEnabled;

procedure inventoryMoveHandler;

procedure getArmorPid(variable armor);

procedure start begin
  if game_loaded then begin
    armorRestrictions =
      get_ini_string(INI_PATH "|equipmentRestrictions|armorRestrictions");
    weaponRestrictions =
      get_ini_string(INI_PATH "|equipmentRestrictions|weaponRestrictions");

    if armorRestrictions != "" orElse weaponRestrictions != "" then begin
      debuggingEnabled = get_ini_setting(
        INI_PATH "|debugging|equipmentRestrictions");
      armorRestrictions = string_split(armorRestrictions, ",");
      weaponRestrictions = string_split(weaponRestrictions, ",");

      variable index, value;

      // Convert to PIDs.
      foreach index: value in armorRestrictions begin
        if debuggingEnabled == 1 then begin
          display_msg("armor: " + value);
          display_msg("armor PID: " + getArmorPid(value));
        end
        armorRestrictions[index] = getArmorPid(value);
      end
      fix_array(armorRestrictions);

      // Convert to integers.
      foreach index: value in weaponRestrictions begin
        weaponRestrictions[index] = atoi(value);
      end
      fix_array(weaponRestrictions);

      register_hook_proc(HOOK_INVENTORYMOVE, inventoryMoveHandler);
    end
  end
end

procedure inventoryMoveHandler begin
  variable
    targetSlot = get_sfall_arg_at(0),
    movedItem = get_sfall_arg_at(1);

  // Armor restrictions.
  if targetSlot == 3 andAlso
      obj_item_subtype(movedItem) == item_type_armor andAlso
      scan_array(armorRestrictions, obj_pid(movedItem)) != -1 then begin
    set_sfall_return(0);

    display_msg("Cannot equip the " + obj_name(movedItem) + ".");

    return;
  end

  // Weapon restrictions.
  if (targetSlot == 1 or targetSlot == 2) andAlso
      obj_item_subtype(movedItem) == item_type_weapon andAlso
      scan_array(weaponRestrictions, obj_pid(movedItem)) != -1 then begin
    set_sfall_return(0);

    display_msg("Cannot equip the " + obj_name(movedItem) + ".");
  end
end

procedure getArmorPid(variable armor) begin
  variable armorPids = {
    "ROBES":                      PID_PURPLE_ROBE,
    "BRIDGEKEEPERS_ROBES":        PID_BRIDGEKEEPERS_ROBE,
    "LEATHER_JACKET":             PID_LEATHER_JACKET,
    "COMBAT_LEATHER_JACKET":      PID_CURED_LEATHER_ARMOR,
    "LEATHER_ARMOR":              PID_LEATHER_ARMOR,
    "LEATHER_ARMOR_MK_II":        PID_LEATHER_ARMOR_MK_II,
    "METAL_ARMOR":                PID_METAL_ARMOR,
    "METAL_ARMOR_MK_II":          PID_METAL_ARMOR_MK_II,
    "TESLA_ARMOR":                PID_TESLA_ARMOR,
    "COMBAT_ARMOR":               PID_COMBAT_ARMOR,
    "COMBAT_ARMOR_MK_II":         PID_COMBAT_ARMOR_MK_II,
    "BROTHERHOOD_ARMOR":          PID_BROTHERHOOD_COMBAT_ARMOR,
    "POWER_ARMOR":                PID_POWERED_ARMOR,
    "HARDENED_POWER_ARMOR":       PID_HARDENED_POWER_ARMOR,
    "ADVANCED_POWER_ARMOR":       PID_ADVANCED_POWER_ARMOR,
    "ADVANCED_POWER_ARMOR_MK_II": PID_ADVANCED_POWER_ARMOR_MK2
  };

  armor = string_toupper(armor);

  if armorPids[armor] then return armorPids[armor];
  else return atoi(armor);
end
