#include "headers/sfall/sfall.h"
#include "headers/sfall/define_lite.h"

#include "headers/fallout-2-adjustments.h"

variable builtInFunctionsEnabled;

// Hook handlers in alphabetical order.
procedure barterPriceHandler;
procedure calcApCostHandler;
procedure combatTurnHandler;
procedure encounterHandler;
procedure gameModeChangeHandler;
procedure inventoryMoveHandler;
procedure keyPressHandler;
procedure moveCostHandler;
procedure onDeathHandler;
procedure rollCheckHandler;
procedure sneakHandler;
procedure stdProcedureHandler;
procedure stdProcedureEndHandler;
procedure useObjHandler;
procedure useObjOnHandler;
procedure useSkillHandler;
procedure useSkillOnHandler;
procedure withinPerceptionHandler;

procedure builtInFunctions;
procedure getGameModeNamesString(variable gameMode);
procedure getItemSubtypeName(variable number);
procedure getRollResultName(variable number);
procedure getStdProcedureName(variable number);

procedure start begin
  if game_loaded then begin
    variable developerTools = get_ini_section(INI_PATH, "developerTools");

    if developerTools["allHooks"] == "1" orElse
        developerTools["barterPrice"] == "1" then begin
      register_hook_proc(HOOK_BARTERPRICE, barterPriceHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["calcApCost"] == "1" then begin
      register_hook_proc(HOOK_CALCAPCOST, calcApCostHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["combatTurn"] == "1" then begin
      register_hook_proc(HOOK_COMBATTURN, combatTurnHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["encounter"] == "1" then begin
      register_hook_proc(HOOK_ENCOUNTER, encounterHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["gameModeChange"] == "1" then begin
      register_hook_proc(HOOK_GAMEMODECHANGE, gameModeChangeHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["inventoryMove"] == "1" then begin
      register_hook_proc(HOOK_INVENTORYMOVE, inventoryMoveHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["keyPress"] == "1" then begin
      register_hook_proc(HOOK_KEYPRESS, keyPressHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["moveCost"] == "1" then begin
      register_hook_proc(HOOK_MOVECOST, moveCostHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["onDeath"] == "1" then begin
      register_hook_proc(HOOK_ONDEATH, onDeathHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["rollCheck"] == "1" then begin
      register_hook_proc(HOOK_ROLLCHECK, rollCheckHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["sneak"] == "1" then begin
      register_hook_proc(HOOK_SNEAK, sneakHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["stdProcedure"] == "1" then begin
      register_hook_proc(HOOK_STDPROCEDURE, stdProcedureHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["stdProcedureEnd"] == "1" then begin
      register_hook_proc(HOOK_STDPROCEDURE_END, stdProcedureEndHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["useObj"] == "1" then begin
      register_hook_proc(HOOK_USEOBJ, useObjHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["useObjOn"] == "1" then begin
      register_hook_proc(HOOK_USEOBJON, useObjOnHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["useSkill"] == "1" then begin
      register_hook_proc(HOOK_USESKILL, useSkillHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["useSkillOn"] == "1" then begin
      register_hook_proc(HOOK_USESKILLON, useSkillOnHandler);
    end
    if developerTools["allHooks"] == "1" orElse
        developerTools["withinPerception"] == "1" then begin
      register_hook_proc(HOOK_WITHINPERCEPTION, withinPerceptionHandler);
    end

    if developerTools["builtInFunctions"] == "1" then begin
      builtInFunctionsEnabled = true;
      call builtInFunctions;
    end
  end
end

procedure builtInFunctions begin
  display_msg("builtInFunctions. To call again, enable keyPress and press ~.");

  display_msg("dude_obj: " + dude_obj);
  display_msg("get_critter_stat(dude_obj, STAT_gender): " +
    get_critter_stat(dude_obj, STAT_gender));
  display_msg("obj_name(dude_obj): " + obj_name(dude_obj));
  display_msg("---");
  display_msg("game_time: " + game_time);
  display_msg("game_time_hour: " + game_time_hour);
  display_msg("get_day: " + get_day);
  display_msg("get_month: " + get_month);
  display_msg("---");
  display_msg("cur_map_index: " + cur_map_index);
  display_msg("days_since_visited: " + days_since_visited);
  display_msg("map_first_run: " + map_first_run);
  display_msg("cur_town: " + cur_town);
  display_msg("---");
  display_msg("get_game_mode: " + get_game_mode);
  display_msg("combat_is_initialized: " + combat_is_initialized);
  display_msg("---");

  display_msg("get_outline(dude_obj): " + get_outline(dude_obj));
  if get_outline(dude_obj) == 0 then begin
    display_msg("set_outline(dude_obj, OUTLINE_YELLOW)");
    set_outline(dude_obj, OUTLINE_YELLOW);
  end else begin
    display_msg("set_outline(dude_obj, OUTLINE_NONE)");
    set_outline(dude_obj, OUTLINE_NONE);
  end
  display_msg("tile_refresh_display");
  tile_refresh_display;

  display_msg("---");
  display_msg("get_pc_stat(1): " + get_pc_stat(1));
  display_msg("drug_influence(dude_obj): " + drug_influence(dude_obj));
  // SKILL_SNEAK (8)
  display_msg("has_skill(dude_obj, SKILL_SNEAK): " +
    has_skill(dude_obj, SKILL_SNEAK));
  // Additional skill points you invested in the skill.
  display_msg("get_critter_skill_points(dude_obj, SKILL_SNEAK): " +
    get_critter_skill_points(dude_obj, SKILL_SNEAK));
  display_msg("is_success(roll_vs_skill(dude_obj, SKILL_SNEAK, 0)): " +
    is_success(roll_vs_skill(dude_obj, SKILL_SNEAK, 0)));
  // Only works for sneak.
  display_msg("using_skill(dude_obj, SKILL_SNEAK): " +
    using_skill(dude_obj, SKILL_SNEAK));
  display_msg("sneak_success: " + sneak_success);
  display_msg("---");
  display_msg("inven_count(dude_obj): " + inven_count(dude_obj));
  display_msg("obj_name(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)): " +
    obj_name(critter_inven_obj(dude_obj, INVEN_TYPE_WORN)));
  display_msg("obj_name(inven_ptr(dude_obj, 0)): " +
    obj_name(inven_ptr(dude_obj, 0)));
  // Takes item object parameter (not item PID).
  // Works correctly with different stacks of the same item.
  display_msg("obj_is_carrying_obj(dude_obj, inven_ptr(dude_obj, 0)): " +
    obj_is_carrying_obj(dude_obj, inven_ptr(dude_obj, 0)));
end

procedure barterPriceHandler begin
  variable
    offeredPrice = get_sfall_arg_at(2),
    offeredPriceUnmodified = get_sfall_arg_at(5),
    tradingWithPartyMember = get_sfall_arg_at(9);

  display_msg(
    "HOOK_BARTERPRICE. offeredPrice: " + offeredPrice +
    ", offeredPriceUnmodified: " + offeredPriceUnmodified +
    ", tradingWithPartyMember: " + tradingWithPartyMember +
    "."
  );
end

procedure calcApCostHandler begin
  variable
    critter = get_sfall_arg_at(0),
    attackType = get_sfall_arg_at(1),
    apCost = get_sfall_arg_at(3),
    weapon = get_sfall_arg_at(4);

  display_msg(
    "HOOK_CALCAPCOST. critterName: " + obj_name(critter) +
    ", attackType: " + attackType +
    ", apCost: " + apCost +
    ", weapon: " + weapon +
    ", weaponName: " + obj_name(weapon) +
    "."
  );
end

procedure combatTurnHandler begin
  variable
    eventType = get_sfall_arg_at(0);

  display_msg(
    "HOOK_COMBATTURN. eventType: " + eventType +
    "."
  );
end

procedure encounterHandler begin
  variable
    eventType = get_sfall_arg_at(0),
    isSpecialEncounter = get_sfall_arg_at(2);

  display_msg(
    "HOOK_ENCOUNTER. eventType: " + eventType +
    ", isSpecialEncounter: " + isSpecialEncounter +
    "."
  );
end

procedure gameModeChangeHandler begin
  variable
    eventType = get_sfall_arg_at(0),
    previousGameMode = get_sfall_arg_at(1);

  display_msg(
    "HOOK_GAMEMODECHANGE. eventType: " + eventType +
    ", previousGameMode: " + previousGameMode +
    ", previousGameModeName: " + getGameModeNamesString(previousGameMode) +
    ", currentGameMode: " + get_game_mode +
    ", currentGameModeName: " + getGameModeNamesString(get_game_mode) +
    "."
  );
end

procedure getGameModeNamesString(variable gameMode) begin
  variable gameModeNames ={
    "WORLDMAP":    WORLDMAP,
    "LOCALMAP":    LOCALMAP,
    "DIALOG":      DIALOG,
    "ESCMENU":     ESCMENU,
    "SAVEGAME":    SAVEGAME,
    "LOADGAME":    LOADGAME,
    "COMBAT":      COMBAT,
    "OPTIONS":     OPTIONS,
    "HELP":        HELP,
    "CHARSCREEN":  CHARSCREEN,
    "PIPBOY":      PIPBOY,
    "PCOMBAT":     PCOMBAT,
    "INVENTORY":   INVENTORY,
    "AUTOMAP":     AUTOMAP,
    "SKILLDEX":    SKILLDEX,
    "INTFACEUSE":  INTFACEUSE,
    "INTFACELOOT": INTFACELOOT,
    "BARTER":      BARTER,
    "HEROWIN":     HEROWIN,
    "DIALOGVIEW":  DIALOGVIEW,
    "COUNTERWIN":  COUNTERWIN,
    "SPECIAL":     SPECIAL
  };

  variable gameModeNamesString = "", index, value;

  foreach index: value in gameModeNames begin
    if gameMode bwand value then begin
      if gameModeNamesString != "" then gameModeNamesString += " ";
      gameModeNamesString += index;
    end
  end

  if gameModeNamesString == "" then gameModeNamesString = "-";

  return gameModeNamesString;
end

procedure inventoryMoveHandler begin
  variable
    targetSlot = get_sfall_arg_at(0),
    movedItem = get_sfall_arg_at(1),
    replacedItem = get_sfall_arg_at(2),
    movedItemSubtype = obj_item_subtype(movedItem);

  display_msg(
    "HOOK_INVENTORYMOVE. targetSlot: " + targetSlot +
    ", movedItem: " + movedItem +
    ", movedItemName: " + obj_name(movedItem) +
    ", movedItemPid: " + obj_pid(movedItem) +
    ", movedItemSubtype: " + movedItemSubtype +
    ", movedItemSubtypeName: " + getItemSubtypeName(movedItemSubtype) +
    ", replacedItem: " + replacedItem +
    ", replacedItemName: " + obj_name(replacedItem) +
    "."
  );
end

procedure getItemSubtypeName(variable number) begin
  variable itemSubtypeNames = {
    "item_type_armor":     item_type_armor,
    "item_type_container": item_type_container,
    "item_type_drug":      item_type_drug,
    "item_type_weapon":    item_type_weapon,
    "item_type_ammo":      item_type_ammo,
    "item_type_misc_item": item_type_misc_item,
    "item_type_key_item":  item_type_key_item
  };

  variable index, value;

  foreach index: value in itemSubtypeNames begin
    if value == number then return index;
  end
end

procedure keyPressHandler begin
  variable
    eventType = get_sfall_arg_at(0),
    keyCode = get_sfall_arg_at(1);

  display_msg(
    "HOOK_KEYPRESS. eventType: " + eventType +
    ", keyCode: " + keyCode +
    "."
  );

  if builtInFunctionsEnabled andAlso
      keyCode == KEY_CODE_TILDE andAlso eventType == 0 then begin
    call builtInFunctions;
  end
end

procedure moveCostHandler begin
  variable
    critter = get_sfall_arg_at(0),
    hexesNumber = get_sfall_arg_at(1),
    apCost = get_sfall_arg_at(2);

  display_msg(
    "HOOK_MOVECOST. critterName: " + obj_name(critter) +
    ", hexesNumber: " + hexesNumber +
    ", apCost: " + apCost +
    "."
  );
end

procedure onDeathHandler begin
  variable
    critter = get_sfall_arg_at(0);

  display_msg(
    "HOOK_ONDEATH. critterName: " + obj_name(critter) +
    "."
  );
end

procedure rollCheckHandler begin
  variable
    eventType = get_sfall_arg_at(0),
    rollResult = get_sfall_arg_at(1);

  display_msg(
    "HOOK_ROLLCHECK. eventType: " + eventType +
    ", rollResult: " + rollResult +
    ", rollResultName: " + getRollResultName(rollResult) +
    ", rollSuccess: " + is_success(rollResult) +
    "."
  );
end

procedure getRollResultName(variable number) begin
  variable rollResultNames = {
    "ROLL_CRITICAL_FAILURE": ROLL_CRITICAL_FAILURE,
    "ROLL_FAILURE":          ROLL_FAILURE,
    "ROLL_SUCCESS":          ROLL_SUCCESS,
    "ROLL_CRITICAL_SUCCESS": ROLL_CRITICAL_SUCCESS
  };

  variable index, value;

  foreach index: value in rollResultNames begin
    if value == number then return index;
  end
end

procedure sneakHandler begin
  variable
    sneakSuccess = get_sfall_arg_at(0),
    sneakCheckDuration = get_sfall_arg_at(1);

  display_msg(
    "HOOK_SNEAK. sneakSuccess: " + sneakSuccess +
    ", sneakCheckDuration: " + sneakCheckDuration +
    "."
  );
end

procedure stdProcedureHandler begin
  variable
    standardProcedure = get_sfall_arg_at(0),
    owner = get_sfall_arg_at(1),
    caller = get_sfall_arg_at(2),
    target = get_sfall_arg_at(4);

  display_msg(
    "HOOK_STDPROCEDURE. standardProcedure: " + standardProcedure +
    ", stdProcedureName: " + getStdProcedureName(standardProcedure) +
    ", ownerName: " + obj_name(owner) +
    ", callerName: " + obj_name(caller) +
    ", targetName: " + obj_name(target) +
    "."
  );
end

procedure stdProcedureEndHandler begin
  variable
    standardProcedure = get_sfall_arg_at(0),
    owner = get_sfall_arg_at(1),
    caller = get_sfall_arg_at(2),
    target = get_sfall_arg_at(4);

  display_msg(
    "HOOK_STDPROCEDURE_END. standardProcedure: " + standardProcedure +
    ", stdProcedureName: " + getStdProcedureName(standardProcedure) +
    ", ownerName: " + obj_name(owner) +
    ", callerName: " + obj_name(caller) +
    ", targetName: " + obj_name(target) +
    "."
  );
end

procedure getStdProcedureName(variable number) begin
  variable stdProcedureNames = {
    "no_proc":           no_proc,
    "start_proc":        start_proc,
    "spatial_proc":      spatial_proc,
    "description_proc":  description_proc,
    "pickup_proc":       pickup_proc,
    "drop_proc":         drop_proc,
    "use_proc":          use_proc,
    "use_obj_on_proc":   use_obj_on_proc,
    "use_skill_on_proc": use_skill_on_proc,
    "use_ad_on_proc":    use_ad_on_proc,
    "use_disad_on_proc": use_disad_on_proc,
    "talk_proc":         talk_proc,
    "critter_proc":      critter_proc,
    "combat_proc":       combat_proc,
    "damage_proc":       damage_proc,
    "map_enter_proc":    map_enter_proc,
    "map_exit_proc":     map_exit_proc,
    "create_proc":       create_proc,
    "destroy_proc":      destroy_proc,
    "barter_init_proc":  barter_init_proc,
    "barter_proc":       barter_proc,
    "look_at_proc":      look_at_proc,
    "timed_event_proc":  timed_event_proc,
    "map_update_proc":   map_update_proc
  };

  variable index, value;

  foreach index: value in stdProcedureNames begin
    if value == number then return index;
  end
end

procedure useObjHandler begin
  variable
    critter = get_sfall_arg_at(0),
    object = get_sfall_arg_at(1);

  display_msg(
    "HOOK_USEOBJ. critterName: " + obj_name(critter) +
    ", objectName: " + obj_name(object) +
    "."
  );
end

procedure useObjOnHandler begin
  variable
    target = get_sfall_arg_at(0),
    critter = get_sfall_arg_at(1),
    object = get_sfall_arg_at(2);

  display_msg(
    "HOOK_USEOBJON. targetName: " + obj_name(target) +
    ", critterName: " + obj_name(critter) +
    ", objectName: " + obj_name(object) +
    "."
  );
end

procedure useSkillHandler begin
  variable
    skill = get_sfall_arg_at(2);

  display_msg(
    "HOOK_USESKILL. skill: " + skill +
    "."
  );
end

procedure useSkillOnHandler begin
  variable
    skill = get_sfall_arg_at(2);

  display_msg(
    "HOOK_USESKILLON. skill: " + skill +
    "."
  );
end

procedure withinPerceptionHandler begin
  variable
    watcher = get_sfall_arg_at(0),
    target = get_sfall_arg_at(1),
    withinPerception = get_sfall_arg_at(2),
    hookType = get_sfall_arg_at(3);

  if combat_is_initialized then begin
    display_msg(
      "HOOK_WITHINPERCEPTION. watcherName: " + obj_name(watcher) +
      ", targetName: " + obj_name(target) +
      ", withinPerception: " + withinPerception +
      ", hookType: " + hookType +
      "."
    );
  end
end
